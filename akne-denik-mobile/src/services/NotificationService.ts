// services/NotificationService.ts - Push notifikace pro React Native
import * as Notifications from 'expo-notifications';
import * as Device from 'expo-device';
import Constants from 'expo-constants';
import { Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { doc, setDoc, serverTimestamp } from 'firebase/firestore';
import { db } from '../lib/firebase';

// Konfigurace notifikac√≠
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: true,
  }),
});

export interface NotificationData {
  screen?: string;
  day?: number;
  type?: 'daily_reminder' | 'photo_reminder' | 'achievement' | 'custom';
  [key: string]: any;
}

export class NotificationService {
  private static instance: NotificationService;
  private expoPushToken: string | null = null;
  private isInitialized = false;

  static getInstance(): NotificationService {
    if (!NotificationService.instance) {
      NotificationService.instance = new NotificationService();
    }
    return NotificationService.instance;
  }

  // üöÄ Inicializace notifikaƒçn√≠ho syst√©mu
  async initialize(): Promise<boolean> {
    if (this.isInitialized) return true;

    try {
      console.log('üîî Inicializuji notifikaƒçn√≠ syst√©m...');

      // Registrace push token
      const token = await this.registerForPushNotifications();
      if (token) {
        this.expoPushToken = token;
        console.log('‚úÖ Push token z√≠sk√°n:', token);
      }

      // Nastaven√≠ Android kan√°l≈Ø
      if (Platform.OS === 'android') {
        await this.setupAndroidChannels();
      }

      // Event listenery
      this.setupNotificationListeners();

      this.isInitialized = true;
      return true;

    } catch (error) {
      console.error('‚ùå Chyba p≈ôi inicializaci notifikac√≠:', error);
      return false;
    }
  }

  // üì± Registrace pro push notifikace
  private async registerForPushNotifications(): Promise<string | null> {
    if (!Device.isDevice) {
      console.warn('üö´ Push notifikace funguj√≠ pouze na fyzick√Ωch za≈ô√≠zen√≠ch');
      return null;
    }

    try {
      // Kontrola existuj√≠c√≠ch opr√°vnƒõn√≠
      const { status: existingStatus } = await Notifications.getPermissionsAsync();
      let finalStatus = existingStatus;

      // Po≈æ√°d√°n√≠ o opr√°vnƒõn√≠ pokud nen√≠ udƒõleno
      if (existingStatus !== 'granted') {
        const { status } = await Notifications.requestPermissionsAsync();
        finalStatus = status;
      }

      if (finalStatus !== 'granted') {
        console.warn('üö´ Notifikace nebyly povoleny');
        return null;
      }

      // Z√≠sk√°n√≠ Expo push token
      let token;
      try {
        const projectId = Constants.expoConfig?.extra?.eas?.projectId ?? Constants.easConfig?.projectId;
        if (!projectId) {
          throw new Error('Project ID not found');
        }
        
        token = (await Notifications.getExpoPushTokenAsync({
          projectId,
        })).data;
      } catch (error) {
        console.error('Chyba p≈ôi z√≠sk√°v√°n√≠ push token:', error);
        // Fallback pro development
        token = `ExponentPushToken[DEVELOPMENT-${Date.now()}]`;
      }

      console.log('üì± Push token:', token);
      return token;

    } catch (error) {
      console.error('‚ùå Chyba p≈ôi registraci push notifikac√≠:', error);
      return null;
    }
  }

  // ü§ñ Nastaven√≠ Android kan√°l≈Ø
  private async setupAndroidChannels(): Promise<void> {
    await Notifications.setNotificationChannelAsync('daily-reminders', {
      name: 'Denn√≠ p≈ôipomenut√≠',
      importance: Notifications.AndroidImportance.HIGH,
      vibrationPattern: [0, 250, 250, 250],
      lightColor: '#ec4899',
      sound: 'default',
      description: 'P≈ôipomenut√≠ denn√≠ch √∫kol≈Ø a rutiny',
    });

    await Notifications.setNotificationChannelAsync('photo-reminders', {
      name: 'Fotografick√© dny',
      importance: Notifications.AndroidImportance.HIGH,
      vibrationPattern: [0, 500, 250, 500],
      lightColor: '#8b5cf6',
      sound: 'default',
      description: 'P≈ôipomenut√≠ fotografick√Ωch dn≈Ø',
    });

    await Notifications.setNotificationChannelAsync('achievements', {
      name: '√öspƒõchy',
      importance: Notifications.AndroidImportance.DEFAULT,
      vibrationPattern: [0, 200, 100, 200, 100, 200],
      lightColor: '#10b981',
      sound: 'default',
      description: 'Ozn√°men√≠ o dosa≈æen√Ωch √∫spƒõ≈°√≠ch',
    });
  }

  // üëÇ Event listenery pro notifikace
  private setupNotificationListeners(): void {
    // Notifikace p≈ôijata kdy≈æ je app v pop≈ôed√≠
    Notifications.addNotificationReceivedListener(notification => {
      console.log('üîî Notifikace p≈ôijata:', notification);
    });

    // Notifikace kliknuta
    Notifications.addNotificationResponseReceivedListener(response => {
      console.log('üëÜ Notifikace kliknuta:', response);
      this.handleNotificationPress(response.notification.request.content.data);
    });
  }

  // üéØ Handling kliknut√≠ na notifikaci
  private handleNotificationPress(data: NotificationData): void {
    console.log('üéØ Handling notification press:', data);
    
    // Zde m≈Ø≈æe≈° implementovat navigaci na specifick√© obrazovky
    // Nap≈ô√≠klad pomoc√≠ React Navigation:
    /*
    if (data.screen === 'MyDay') {
      NavigationService.navigate('MyDay');
    } else if (data.screen === 'Photos' && data.day) {
      NavigationService.navigate('Photos', { day: data.day });
    }
    */
  }

  // üíæ Ulo≈æen√≠ push token do Firebase
  async savePushTokenToFirebase(userId: string): Promise<void> {
    if (!this.expoPushToken) return;

    try {
      await setDoc(doc(db, 'userTokens', userId), {
        pushToken: this.expoPushToken,
        platform: Platform.OS,
        deviceId: Constants.deviceId || 'unknown',
        appVersion: Constants.expoConfig?.version || '1.0.0',
        updatedAt: serverTimestamp(),
      }, { merge: true });

      console.log('‚úÖ Push token ulo≈æen do Firebase');
    } catch (error) {
      console.error('‚ùå Chyba p≈ôi ukl√°d√°n√≠ push token:', error);
    }
  }

  // ‚è∞ Napl√°nov√°n√≠ denn√≠ho p≈ôipomenut√≠
  async scheduleDailyReminder(hour: number = 9, minute: number = 0): Promise<void> {
    try {
      // Zru≈° v≈°echna existuj√≠c√≠ denn√≠ p≈ôipomenut√≠
      await this.cancelScheduledNotification('daily-reminder');

      const trigger = {
        hour,
        minute,
        repeats: true,
      };

      await Notifications.scheduleNotificationAsync({
        identifier: 'daily-reminder',
        content: {
          title: 'Akn√© Den√≠k üíñ',
          body: 'Nezapome≈à na dne≈°n√≠ √∫kol a z√°znam!',
          data: { 
            type: 'daily_reminder',
            screen: 'MyDay'
          },
          sound: 'default',
          categoryIdentifier: 'daily',
        },
        trigger,
      });

      // Ulo≈æen√≠ do AsyncStorage pro persistenci
      await AsyncStorage.setItem('@dailyReminderTime', JSON.stringify({ hour, minute }));
      
      console.log(`‚úÖ Denn√≠ p≈ôipomenut√≠ nastaveno na ${hour}:${minute.toString().padStart(2, '0')}`);

    } catch (error) {
      console.error('‚ùå Chyba p≈ôi pl√°nov√°n√≠ denn√≠ho p≈ôipomenut√≠:', error);
    }
  }

  // üì∏ Napl√°nov√°n√≠ p≈ôipomenut√≠ pro fotografick√Ω den
  async schedulePhotoReminder(day: number, date: Date): Promise<void> {
    try {
      const identifier = `photo-reminder-${day}`;

      await Notifications.scheduleNotificationAsync({
        identifier,
        content: {
          title: 'Fotografick√Ω den! üì∏',
          body: `Den ${day} - ƒças po≈ô√≠dit fotku pokroku!`,
          data: { 
            type: 'photo_reminder',
            screen: 'Photos',
            day 
          },
          sound: 'default',
          categoryIdentifier: 'photo',
        },
        trigger: {
          date,
        },
      });

      console.log(`‚úÖ Foto p≈ôipomenut√≠ napl√°nov√°no pro den ${day}`);

    } catch (error) {
      console.error('‚ùå Chyba p≈ôi pl√°nov√°n√≠ foto p≈ôipomenut√≠:', error);
    }
  }

  // üèÜ Odesl√°n√≠ notifikace o √∫spƒõchu
  async sendAchievementNotification(title: string, body: string, data?: NotificationData): Promise<void> {
    try {
      await Notifications.scheduleNotificationAsync({
        content: {
          title: `üèÜ ${title}`,
          body,
          data: { 
            type: 'achievement',
            ...data 
          },
          sound: 'default',
          categoryIdentifier: 'achievements',
        },
        trigger: null, // Okam≈æitƒõ
      });

      console.log('‚úÖ Achievement notifikace odesl√°na');

    } catch (error) {
      console.error('‚ùå Chyba p≈ôi odes√≠l√°n√≠ achievement notifikace:', error);
    }
  }

  // üì¨ Okam≈æit√° notifikace
  async sendInstantNotification(title: string, body: string, data?: NotificationData): Promise<void> {
    try {
      await Notifications.scheduleNotificationAsync({
        content: {
          title,
          body,
          data: data || {},
          sound: 'default',
        },
        trigger: null,
      });

      console.log('‚úÖ Okam≈æit√° notifikace odesl√°na');

    } catch (error) {
      console.error('‚ùå Chyba p≈ôi odes√≠l√°n√≠ okam≈æit√© notifikace:', error);
    }
  }

  // ‚ùå Zru≈°en√≠ napl√°novan√© notifikace
  async cancelScheduledNotification(identifier: string): Promise<void> {
    try {
      await Notifications.cancelScheduledNotificationAsync(identifier);
      console.log(`‚úÖ Notifikace ${identifier} zru≈°ena`);
    } catch (error) {
      console.error(`‚ùå Chyba p≈ôi ru≈°en√≠ notifikace ${identifier}:`, error);
    }
  }

  // üóëÔ∏è Zru≈°en√≠ v≈°ech notifikac√≠
  async cancelAllNotifications(): Promise<void> {
    try {
      await Notifications.cancelAllScheduledNotificationsAsync();
      console.log('‚úÖ V≈°echny notifikace zru≈°eny');
    } catch (error) {
      console.error('‚ùå Chyba p≈ôi ru≈°en√≠ v≈°ech notifikac√≠:', error);
    }
  }

  // üìã Z√≠sk√°n√≠ v≈°ech napl√°novan√Ωch notifikac√≠
  async getScheduledNotifications(): Promise<Notifications.NotificationRequest[]> {
    try {
      return await Notifications.getAllScheduledNotificationsAsync();
    } catch (error) {
      console.error('‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ napl√°novan√Ωch notifikac√≠:', error);
      return [];
    }
  }

  // üîß Getter pro push token
  getPushToken(): string | null {
    return this.expoPushToken;
  }

  // ‚úÖ Kontrola stavu notifikac√≠
  async getNotificationStatus(): Promise<{
    hasPermission: boolean;
    hasPushToken: boolean;
    isInitialized: boolean;
  }> {
    const { status } = await Notifications.getPermissionsAsync();
    
    return {
      hasPermission: status === 'granted',
      hasPushToken: !!this.expoPushToken,
      isInitialized: this.isInitialized,
    };
  }
}

// Singleton instance
export const notificationService = NotificationService.getInstance();

// Hook pro pou≈æ√≠v√°n√≠ v komponent√°ch
import { useEffect, useState } from 'react';

export function useNotifications() {
  const [isReady, setIsReady] = useState(false);
  const [status, setStatus] = useState({
    hasPermission: false,
    hasPushToken: false,
    isInitialized: false,
  });

  useEffect(() => {
    const initializeNotifications = async () => {
      const success = await notificationService.initialize();
      if (success) {
        const currentStatus = await notificationService.getNotificationStatus();
        setStatus(currentStatus);
      }
      setIsReady(true);
    };

    initializeNotifications();
  }, []);

  const requestPermissions = async () => {
    const success = await notificationService.initialize();
    if (success) {
      const newStatus = await notificationService.getNotificationStatus();
      setStatus(newStatus);
    }
    return success;
  };

  const scheduleDaily = async (hour: number, minute: number) => {
    await notificationService.scheduleDailyReminder(hour, minute);
  };

  const sendAchievement = async (title: string, body: string, data?: NotificationData) => {
    await notificationService.sendAchievementNotification(title, body, data);
  };

  return {
    isReady,
    status,
    requestPermissions,
    scheduleDaily,
    sendAchievement,
    notificationService,
  };
}

// Utility funkce pro testov√°n√≠ notifikac√≠ (pouze v development)
export const testNotifications = async () => {
  if (__DEV__) {
    console.log('üß™ Testov√°n√≠ notifikac√≠...');
    
    // Test okam≈æit√© notifikace
    await notificationService.sendInstantNotification(
      'Test notifikace',
      'Toto je testovac√≠ notifikace z Akn√© Den√≠ku!'
    );

    // Test achievement notifikace za 5 sekund
    setTimeout(async () => {
      await notificationService.sendAchievementNotification(
        'Testovac√≠ √∫spƒõch',
        'Skvƒõle! Testov√°n√≠ notifikac√≠ probƒõhlo √∫spƒõ≈°nƒõ! üéâ'
      );
    }, 5000);
  }
};